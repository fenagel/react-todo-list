{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","handleChange","evt","setState","target","name","value","handleSubmit","preventDefault","newTodo","state","id","uuidv4","completed","addTodo","task","className","onSubmit","this","htmlFor","placeholder","type","onChange","Component","Todo","handleClick","removeTodo","toggleForm","isEditing","handleUpdate","updateTodo","handleToggle","toggleTodo","onClick","TodoList","addTask","newTask","todos","removeTask","filter","todo","update","updatedTask","updatedTodos","map","toggleCompletion","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20f2cec5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { v4 as uuidv4 } from 'uuid';\nimport './NewTodoForm.css';\n\n// NewTodoForm - this component should render a form with one text input for the task to be created.\n// When this form is submitted, a new Todo component should be created.\n\n\nexport default class NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { task: \"\" }\n    }\n\n    handleChange = (evt) => {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n\n    handleSubmit = (evt) => {\n        evt.preventDefault();\n        const newTodo = { ...this.state, id: uuidv4(), completed: false}\n        this.props.addTodo(newTodo);\n        this.setState({\n            task: ''\n        })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Todo</label>\n                    <input\n                        placeholder=\"New Todo\"\n                        type=\"text\"\n                        name=\"task\"\n                        value={this.state.task}\n                        id=\"task\"\n                        onChange={this.handleChange}\n                    />\n                    <button>Add Todo</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './Todo.css';\n\nexport default class Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isEditing: false, task: this.props.task };\n    }\n    handleClick = () => {\n        this.props.removeTodo(this.props.id)\n    }\n    toggleForm = () => {\n        this.setState({ isEditing: !this.state.isEditing });\n    }\n    handleUpdate = (evt) => {\n        evt.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({isEditing: false});\n    }\n    handleChange = (evt) => {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n    handleToggle = (evt) => {\n        this.props.toggleTodo(this.props.id);\n    }\n    \n    render() {\n        let result;\n        if(this.state.isEditing){\n            result = (\n                <div className='Todo'>\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n                        <input type='text' value={this.state.task} onChange={this.handleChange} name='task' />\n                        <button>Save</button>\n                    </form>\n                </div>\n            );\n        } else {\n            result = (\n                <div className='Todo'>\n                    <li className={this.props.completed ? \"Todo-task completed\" : 'Todo-task'} onClick={this.handleToggle}>{this.props.task}</li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}><i className=\"fas fa-pen\" /></button>\n                        <button onClick={this.handleClick}><i className=\"fas fa-trash\" /></button>\n                    </div>\n                </div>\n            );\n        }\n    return result;\n    }\n}\n","import React, { Component } from 'react'\nimport NewTodoForm from './NewTodoForm'\nimport Todo from './Todo';\nimport './TodoList.css';\n\nexport default class TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { todos: [{task: \"wash the dishes\"}]}\n    }\n    addTask = (newTask) => {\n        this.setState({\n            todos: [...this.state.todos, newTask ]\n        });\n    }\n\n    removeTask = (id) => {\n        this.setState({\n            todos: this.state.todos.filter(todo => todo.id !== id)\n        })\n    }\n    update = (id, updatedTask) => {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return { ...todo, task: updatedTask };\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos})\n    }\n\n    toggleCompletion = (id, updatedTask) => {\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return { ...todo, completed: !todo.completed };\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTodos})\n    }\n\n    render() {\n        const todos = this.state.todos.map((todo) =>\n            <Todo\n                task={todo.task}\n                key={todo.id}\n                id={todo.id}\n                removeTodo={this.removeTask}\n                updateTodo={this.update}\n                toggleTodo={this.toggleCompletion}\n                completed={todo.completed}\n            />\n        )\n        return (\n            <div className='TodoList'>\n                <h1>Todo List! <span>A Simple React Todo List App.</span></h1>\n                <ul>\n                    {todos}\n                </ul>\n                <NewTodoForm addTodo={this.addTask}/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}